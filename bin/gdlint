#!/usr/bin/env python3
"""GDScript linter

By default, nothing is being printed on success and the exitcode is 0.
On failure, python exception or list of problems is shown and exitcode is non-zero.

Usage:
  gdlint <file>... [options]
  gdlint -d

Options:
  -d --dump-default-config   Dump default config to 'gdlintrc' file
  -v --verbose               Show extra prints
  -h --help                  Show this screen.
  --version                  Show version.
"""
import sys
import os
import pkg_resources
import logging
from pathlib import Path

import yaml
from docopt import docopt

from gdtoolkit.linter import lint_code, DEFAULT_CONFIG


CONFIG_FILE_NAME = 'gdlintrc'


arguments = docopt(__doc__, version='gdlint {}'.format(
    pkg_resources.get_distribution("gdtoolkit").version))

if not isinstance(arguments, dict):
    print(arguments)            # stderr
    sys.exit(0)

if arguments['--verbose']:
    logging.basicConfig(stream=sys.stdout, level=logging.INFO)

if arguments['--dump-default-config']: # TODO: error handling
    assert not os.path.isfile(CONFIG_FILE_NAME)
    with open(CONFIG_FILE_NAME, 'w') as fh:
        fh.write(yaml.dump(DEFAULT_CONFIG))
    sys.exit(0)

# TODO: extract the algorithm
search_dir = Path(os.getcwd())
found_config_file_path = None
while search_dir != Path('/'):
    file_path = os.path.join(search_dir, CONFIG_FILE_NAME)
    if os.path.isfile(file_path):
        found_config_file_path = file_path
        break
    file_path = os.path.join(search_dir, '.{}'.format(CONFIG_FILE_NAME))
    if os.path.isfile(file_path):
        found_config_file_path = file_path
        break
    search_dir = search_dir.parent

if found_config_file_path is None:
    logging.info("""No 'gdlintrc' nor '.gdlintrc' found. Using default config...""")
    config = DEFAULT_CONFIG
else:
    logging.info("Config file found: '%s'", found_config_file_path)
    with open(found_config_file_path, 'r') as fh:
        config = yaml.load(fh.read(), Loader=yaml.Loader)

logging.info(config)

for file_path in arguments['<file>']:
    with open(file_path, 'r') as fh: # TODO: handle exception
        content = fh.read()
        problems = lint_code(content, config)
        if len(problems) > 0:   # TODO: friendly frontend like in halint
            print('{}:'.format(file_path)) # TODO: stderr
            for problem in problems:
                print(problem)  # TODO: stderr
            sys.exit(1)

logging.info('Success: no problems found')
