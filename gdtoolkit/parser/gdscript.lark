start: _class_stmt+

_class_stmt: (_simple_class_stmt _NL) | compound_class_stmt | _NL
_simple_class_stmt: single_class_stmt (";" single_class_stmt)* [";"]
?single_class_stmt: tool_stmt
                  | pass_stmt
                  | signal_stmt
                  | extends_stmt
                  | classname_stmt
                  | class_var_stmt
                  | const_stmt
                  | export_stmt
                  | onready_stmt
                  | puppet_var_stmt
                  | docstr_stmt
                  | classname_extends_stmt
?compound_class_stmt: class_def
                    | enum_def
                    | "static" func_def -> static_func_def
                    | "remote" func_def -> remote_func_def
                    | "remotesync" func_def -> remotesync_func_def
                    | "master" func_def -> master_func_def
                    | "mastersync" func_def -> mastersync_func_def
                    | "puppet" func_def -> puppet_func_def
                    | "puppetsync" func_def -> puppetsync_func_def
                    | "sync" func_def -> sync_func_def
                    | func_def

tool_stmt: "tool"
signal_stmt: "signal" NAME ["(" [NAME ("," NAME)* [trailing_comma]] ")"]
extends_stmt: "extends" (NAME | string) ("." NAME)*
classname_stmt: "class_name" NAME ["," string]
!classname_extends_stmt: "class_name" NAME ["," string] "extends" (NAME | string) ("." NAME)*
export_stmt: export_inf | export_typed
export_inf: "export" [(puppet|onready)] (var_assigned | var_typed | var_typed_assgnd | var_inf) [setget]
export_typed: "export" "(" TYPE ("," expr)* ")" [(puppet|onready)] class_var_stmt
class_var_stmt: _var_stmt [setget]
_var_stmt: var_empty
         | var_assigned
         | var_typed
         | var_typed_assgnd
         | var_inf
var_empty: "var" NAME
var_assigned: "var" NAME "=" expr
_var_typed: "var" NAME ":" TYPE
var_typed: _var_typed
var_typed_assgnd: _var_typed "=" expr
var_inf: "var" NAME ":" "=" expr
!setget: "setget" (NAME ["," NAME] | "," NAME)
!const_stmt: "const" NAME [":" [TYPE]] "=" expr
onready_stmt: "onready" class_var_stmt
puppet_var_stmt: "puppet" class_var_stmt
puppet: "puppet"
onready: "onready"
docstr_stmt: string

class_def: "class" NAME [extends_stmt] ":" (_class_body | _class_stmt)
_class_body: _NL _INDENT _class_stmt+ _DEDENT

func_def: func_header _func_suite
func_header: "func" NAME "(" [func_args] ")" ["." parent_call] ["->" TYPE] ":"
parent_call: _call_arglist
func_args: func_arg ("," func_arg)*
?func_arg: func_arg_regular
         | func_arg_inf
         | func_arg_typed
func_arg_regular: ["var"] NAME ["=" expr]
func_arg_inf: ["var"] NAME ":" "=" expr
func_arg_typed: ["var"] NAME ":" TYPE ["=" expr]
_func_suite: _func_body
           | _func_stmt
_func_body: _NL _INDENT _func_stmt+ _DEDENT
_func_stmt: (_simple_func_stmt _NL) | compound_func_stmt
_simple_func_stmt: single_func_stmt (";" single_func_stmt)* [";"]
?single_func_stmt: pass_stmt
                 | return_stmt
                 | func_var_stmt
                 | break_stmt
                 | continue_stmt
                 | expr_stmt
?compound_func_stmt: if_stmt
                   | while_stmt
                   | for_stmt
                   | match_stmt
pass_stmt: "pass"
return_stmt: "return" [expr]
func_var_stmt: _var_stmt
break_stmt.2: "break"
continue_stmt.2: "continue"
expr_stmt: expr
if_stmt: if_branch (_NL? elif_branch)* [_NL? else_branch]
if_branch: "if" expr ":" _func_suite
elif_branch: "elif" expr ":" _func_suite
else_branch: "else" ":" _func_suite
while_stmt: "while" expr ":" _func_suite
for_stmt: "for" NAME "in" expr ":" _func_suite
match_stmt: "match" expr ":" _match_body
_match_body: _NL _INDENT match_branch+ _DEDENT
match_branch: pattern ":" _func_suite

enum_def: (enum_regular | enum_named) _NL
enum_regular: "enum" _enum_body
enum_named: "enum" NAME _enum_body
_enum_body: "{" [enum_element ("," enum_element)* [trailing_comma]] "}"
enum_element: NAME ["=" test_expr]

pattern: list_pattern
?list_pattern: test_pattern ("," test_pattern)*
!?test_pattern: or_pattern ["if" or_pattern "else" test_pattern]
!?or_pattern: and_pattern (("or" | "||") and_pattern)*
!?and_pattern: not_pattern (("and" | "&&") not_pattern)*
!?not_pattern: ("not" | "!") not_pattern | comp_pattern
?comp_pattern: bitw_or_pattern [_comp_op bitw_or_pattern]
!?bitw_or_pattern: bitw_xor_pattern ("|" bitw_xor_pattern)*
!?bitw_xor_pattern: bitw_and_pattern ("^" bitw_and_pattern)*
!?bitw_and_pattern: shift_pattern ("&" shift_pattern)*
!?shift_pattern: arith_pattern (("<<" | ">>") arith_pattern)*
!?arith_pattern: mdr_pattern (("-" | "+") mdr_pattern)*
!?mdr_pattern: neg_pattern (("*" | "/" | "%") neg_pattern)*
!?neg_pattern: "-" neg_pattern
             | bitw_not_pattern
!?bitw_not_pattern: "~" bitw_not_pattern
                  | attr_pattern
!?attr_pattern: atom_pattern ("." atom_pattern)*
?atom_pattern: "(" test_pattern ")" -> par_pattern
             | "var" NAME -> var_capture_pattern
             | ".." -> etc_pattern
             | "_" -> wildcard_pattern
             | array_pattern
             | dict_pattern
             | NAME
             | HEX
             | BIN
             | literal
array_pattern: "[" [test_pattern ("," test_pattern)* [trailing_comma]] "]"
dict_pattern: "{" [dict_pattern_element ("," dict_pattern_element)* [trailing_comma]] "}"
?dict_pattern_element: kv_pair_pattern
                     | atom_pattern
kv_pair_pattern: (c_dict_pattern_element | eq_dict_pattern_element)
c_dict_pattern_element: test_pattern ":" test_pattern
eq_dict_pattern_element: NAME "=" test_pattern

expr: test_expr
    | assnmnt_expr
assnmnt_expr: attr_expr _assnmnt_op test_expr
!_assnmnt_op: "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | ">>=" | "<<="
!?test_expr: or_test ["if" or_test "else" test_expr]
!?or_test: and_test (("or" | "||") and_test)*
!?and_test: not_test (("and" | "&&") not_test)*
!?not_test: ("not" | "!") not_test | content_test
!?content_test: comparison ("in" comparison)*
?comparison: bitw_or [_comp_op bitw_or]
!_comp_op: ">" | "<" | "==" | "!=" | "<=" | ">="
!?bitw_or: bitw_xor ("|" bitw_xor)*
!?bitw_xor: bitw_and ("^" bitw_and)*
!?bitw_and: shift_expr ("&" shift_expr)*
!?shift_expr: arith_expr (("<<" | ">>") arith_expr)*
!?arith_expr: mdr_expr (("-" | "+") mdr_expr)*
!?mdr_expr: neg_expr (("*" | "/" | "%") neg_expr)*
!?neg_expr: "-" neg_expr
          | bitw_not
!?bitw_not: "~" bitw_not
          | type_test
!?type_test: type_cast ("is" type_cast)*
!?type_cast: _call_expr ("as" TYPE)* // TODO: fix precedence (same as "is" probably(!))
_call_expr: standalone_call
          | getattr_call
          | attr_expr
!standalone_call: ["."] NAME _call_arglist
!getattr_call: getattr _call_arglist
!_call_arglist: "(" [test_expr ("," test_expr)*] ")"
!?attr_expr: getattr
           | subscr_expr
getattr: _call_expr _attr+
!_attr: ("." NAME)
?subscr_expr: _call_expr "[" test_expr "]"
            | atom
?atom: "(" test_expr ")" -> par_expr
     | array
     | dict
     | NAME
     | HEX
     | BIN
     | literal
?literal: NUMBER
        | string
        | node_path
        | get_node
HEX.2: /-?0x[a-fA-F0-9][a-fA-F0-9_]*/
BIN.2: /-?0b[01][01_]*/
node_path: "@" string
get_node: "$" (path | string)
path: NAME ("/" NAME)*
array: "[" [test_expr ("," test_expr)* [trailing_comma]] "]"
trailing_comma: ","
dict: "{" [kv_pair ("," kv_pair)* [trailing_comma]] "}"
kv_pair: (c_dict_element | eq_dict_element)
c_dict_element: test_expr ":" test_expr
eq_dict_element: NAME "=" test_expr

TYPE: NAME ("." NAME)*
NUMBER: ["+"|"-"] (FLOAT | INT)
FLOAT: INT _EXP | DECIMAL _EXP?
_EXP: ("e"|"E") SIGNED_INT
SIGNED_INT: ["+"|"-"] INT
DECIMAL: INT "." INT? | "." INT
INT: DIGIT (DIGIT | "_")*
DIGIT: "0".."9"

string: LONG_STRING | REGULAR_STRING
REGULAR_STRING: /("(?!"").*?(?<!\\)(\\\\)*?"|'(?!'').*?(?<!\\)(\\\\)*?')/i
LONG_STRING: /""".*?(?<!\\)(\\\\)*?"""/is | /'''.*?(?<!\\)(\\\\)*?'''/is

_NL: ( /\r?\n[\t ]*/ | COMMENT )+
COMMENT: /#[^\n]*/
LINE_CONT: /\\[\t \f]*\r?\n/

%declare _INDENT _DEDENT

%ignore WS_INLINE
%ignore COMMENT
%ignore LINE_CONT

%import common.WS_INLINE
%import common.CNAME -> NAME
